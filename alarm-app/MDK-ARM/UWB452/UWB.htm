<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UWB452\UWB.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UWB452\UWB.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Aug 11 13:26:10 2023
<BR><P>
<H3>Maximum Stack Usage =        712 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CanRx_Task &rArr; CanRxProc &rArr; NormalCanRxProc &rArr; CanRcvWlSendProc &rArr; WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[16b]">OS_CPU_SR_Save</a>
 <LI><a href="#[16d]">OS_CPU_SR_Restore</a>
 <LI><a href="#[1df]">OSStartHighRdy</a>
 <LI><a href="#[1eb]">OSCtxSw</a>
 <LI><a href="#[1d8]">OSIntCtxSw</a>
 <LI><a href="#[1f]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[33]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ADC0_1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[70]">AngleSensorMNG_Task</a> from angle_sensor.o(i.AngleSensorMNG_Task) referenced from main.o(i.TaskStart)
 <LI><a href="#[71]">AngleSensor_Task</a> from angle_sensor.o(i.AngleSensor_Task) referenced from main.o(i.TaskStart)
 <LI><a href="#[6c]">AppTaskBeep</a> from beep_app.o(i.AppTaskBeep) referenced from main.o(i.TaskStart)
 <LI><a href="#[6d]">AppTaskLight</a> from led_app.o(i.AppTaskLight) referenced from main.o(i.TaskStart)
 <LI><a href="#[1b]">BusFault_Handler</a> from gd32f30x_it.o(i.BusFault_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[37]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[35]">CAN0_RX0_IRQHandler</a> from l4can.o(i.CAN0_RX0_IRQHandler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[36]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[34]">CAN0_TX_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[61]">CAN1_EWMC_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[5f]">CAN1_RX0_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[60]">CAN1_RX1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[5e]">CAN1_TX_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[67]">CanRx_Task</a> from can_app.o(i.CanRx_Task) referenced from can_app.o(i.CanAppInit)
 <LI><a href="#[68]">CanTx_Task</a> from can_app.o(i.CanTx_Task) referenced from can_app.o(i.CanAppInit)
 <LI><a href="#[2c]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[2d]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[2e]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[2f]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[30]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[31]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[32]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[57]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[58]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[59]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel3_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel4_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[1e]">DebugMon_Handler</a> from gd32f30x_it.o(i.DebugMon_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[5c]">ENET_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[5d]">ENET_WKUP_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[50]">EXMC_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[27]">EXTI0_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[49]">EXTI10_15_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[28]">EXTI1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[29]">EXTI2_IRQHandler</a> from rfid_cc1101.o(i.EXTI2_IRQHandler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[2a]">EXTI3_IRQHandler</a> from rfid_cc1101.o(i.EXTI3_IRQHandler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from port.o(i.EXTI4_IRQHandler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[38]">EXTI5_9_IRQHandler</a> from angle_sensor.o(i.EXTI5_9_IRQHandler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[25]">FMC_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[19]">HardFault_Handler</a> from gd32f30x_it.o(i.HardFault_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[41]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[40]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[22]">LVD_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[14]">LogicGetAngleValueXProc</a> from logic.o(i.LogicGetAngleValueXProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[15]">LogicGetAngleValueYProc</a> from logic.o(i.LogicGetAngleValueYProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[16]">LogicGetAngleValueZProc</a> from logic.o(i.LogicGetAngleValueZProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[a]">LogicGetCalibrateFlagProc</a> from logic.o(i.LogicGetCalibrateFlagProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[6]">LogicGetDevTypeInfProc</a> from logic.o(i.LogicGetDevTypeInfProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[9]">LogicGetModifyParamAllProc</a> from logic.o(i.LogicGetModifyParamAllProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[7]">LogicGetModifyParamNumbProc</a> from logic.o(i.LogicGetModifyParamNumbProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[8]">LogicGetModifyParamProc</a> from logic.o(i.LogicGetModifyParamProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[13]">LogicGetReportIntervalProc</a> from logic.o(i.LogicGetReportIntervalProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[11]">LogicGetSystemStatusProc</a> from logic.o(i.LogicGetSystemStatusProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[12]">LogicGetWorkModeProc</a> from logic.o(i.LogicGetWorkModeProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[5]">LogicSaveParamMsgProc</a> from logic.o(i.LogicSaveParamMsgProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[e]">LogicSetAngleValueXProc</a> from logic.o(i.LogicSetAngleValueXProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[f]">LogicSetAngleValueYProc</a> from logic.o(i.LogicSetAngleValueYProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[10]">LogicSetAngleValueZProc</a> from logic.o(i.LogicSetAngleValueZProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[4]">LogicSetCalibrateFlagProc</a> from logic.o(i.LogicSetCalibrateFlagProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[1]">LogicSetDevTypeInfProc</a> from logic.o(i.LogicSetDevTypeInfProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[2]">LogicSetModifyParamNumbProc</a> from logic.o(i.LogicSetModifyParamNumbProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[3]">LogicSetModifyParamProc</a> from logic.o(i.LogicSetModifyParamProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[d]">LogicSetReportIntervalProc</a> from logic.o(i.LogicSetReportIntervalProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[b]">LogicSetSystemStatusProc</a> from logic.o(i.LogicSetSystemStatusProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[c]">LogicSetWorkModeProc</a> from logic.o(i.LogicSetWorkModeProc) referenced 2 times from logic.o(.data)
 <LI><a href="#[1a]">MemManage_Handler</a> from gd32f30x_it.o(i.MemManage_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[77]">MessageForRfidRcved</a> from wireless.o(i.MessageForRfidRcved) referenced from wireless.o(i.WL_MNG_Task)
 <LI><a href="#[18]">NMI_Handler</a> from gd32f30x_it.o(i.NMI_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[64]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[6b]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[6a]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[1f]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[26]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[4a]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[24]">RTC_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[44]">SPI0_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[52]">SPI2_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[1d]">SVC_Handler</a> from gd32f30x_it.o(i.SVC_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from gd32f30x_it.o(i.SysTick_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_cl.o(.text)
 <LI><a href="#[23]">TAMPER_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[39]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[3c]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[3b]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[3a]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[3d]">TIMER1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[3e]">TIMER2_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[3f]">TIMER3_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[51]">TIMER4_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[55]">TIMER5_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[56]">TIMER6_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[4c]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[4f]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[4e]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[4d]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[78]">TaskStart</a> from main.o(i.TaskStart) referenced from main.o(i.main)
 <LI><a href="#[53]">UART3_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[46]">USART0_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[47]">USART1_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[62]">USBFS_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[4b]">USBFS_WKUP_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[1c]">UsageFault_Handler</a> from gd32f30x_it.o(i.UsageFault_Handler) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[6e]">UwbAnchorIrqTask</a> from uwb_anchor.o(i.UwbAnchorIrqTask) referenced from main.o(i.TaskStart)
 <LI><a href="#[69]">UwbAppTask</a> from location_data_app.o(i.UwbAppTask) referenced from location_data_app.o(i.LocationDataAppInit)
 <LI><a href="#[75]">UwbRxOkCb</a> from uwb_anchor.o(i.UwbRxOkCb) referenced from uwb_anchor.o(i.UwbAnchorIrqTask)
 <LI><a href="#[6f]">WL_MNG_Task</a> from wireless.o(i.WL_MNG_Task) referenced from main.o(i.TaskStart)
 <LI><a href="#[21]">WWDGT_IRQHandler</a> from startup_gd32f30x_cl.o(.text) referenced from startup_gd32f30x_cl.o(RESET)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_cl.o(.text)
 <LI><a href="#[72]">else_err_cb</a> from uwb_anchor.o(i.else_err_cb) referenced from uwb_anchor.o(i.UwbAnchorIrqTask)
 <LI><a href="#[63]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[73]">rx_err_cb</a> from uwb_anchor.o(i.rx_err_cb) referenced from uwb_anchor.o(i.UwbAnchorIrqTask)
 <LI><a href="#[74]">rx_to_cb</a> from uwb_anchor.o(i.rx_to_cb) referenced from uwb_anchor.o(i.UwbAnchorIrqTask)
 <LI><a href="#[76]">tx_conf_cb</a> from uwb_anchor.o(i.tx_conf_cb) referenced from uwb_anchor.o(i.UwbAnchorIrqTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(.text)
</UL>
<P><STRONG><a name="[263]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[264]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[265]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[266]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[267]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[268]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[269]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[16b]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataProcess
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>

<P><STRONG><a name="[16d]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataProcess
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>

<P><STRONG><a name="[1df]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1eb]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1d8]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_distance
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinalMsgGetTS_64
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[26a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oList_Write_data
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CAN_Write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUwbData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLeftPeriodProc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashWriteBuf
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCanDriData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromSPI
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_RED
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_GREEN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_BLUE
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetModifyParamAllProc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_ReceiveData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInit
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
</UL>

<P><STRONG><a name="[26c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashWriteBuf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTagData
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistDataStrInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oListDataInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusDataInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBufferDataInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvWlSendProc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dist_ListDataInit
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[259]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_dmp_get_euler_angle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_dmp_get_euler_angle
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_dmp_get_euler_angle
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[270]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[271]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[273]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[84]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[274]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[275]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[276]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>AddDistData</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, uwb_anchor.o(i.AddDistData))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = AddDistData &rArr; GetDistDataBuf &rArr; DeleteSecondListData &rArr; TagOffLineProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDistDataPro
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistDataEqualBuf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistDataBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
</UL>

<P><STRONG><a name="[92]"></a>AncDataFrameProcess</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uwb_anchor.o(i.AncDataFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = AncDataFrameProcess &rArr; AncRxFinalFrameProcess &rArr; AddDistData &rArr; GetDistDataBuf &rArr; DeleteSecondListData &rArr; TagOffLineProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartRxProcess
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbRxOkCb
</UL>

<P><STRONG><a name="[98]"></a>AncErrorProcess</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uwb_anchor.o(i.AncErrorProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AncErrorProcess &rArr; RestartRxProcess &rArr; DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbRxOkCb
</UL>

<P><STRONG><a name="[99]"></a>AncIrqDeclareFrameProcess</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, uwb_anchor.o(i.AncIrqDeclareFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = AncIrqDeclareFrameProcess &rArr; SetDelayTxTime &rArr; DWT_SetDelayedTRxTime &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxTimeStamp_u64
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinalMsgSetTS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteTxfCtrl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteTxData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_StartTx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDelayTxTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBeaconAckDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbRxOkCb
</UL>

<P><STRONG><a name="[94]"></a>AncRxFinalFrameProcess</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, uwb_anchor.o(i.AncRxFinalFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = AncRxFinalFrameProcess &rArr; AddDistData &rArr; GetDistDataBuf &rArr; DeleteSecondListData &rArr; TagOffLineProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxTimeStamp_u64
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxTimeStamp_u64
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FinalMsgGetTS_64
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculate_distance
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DwLocSucProcess
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDistData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncDataFrameProcess
</UL>

<P><STRONG><a name="[93]"></a>AncRxPollFrameProcess</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, uwb_anchor.o(i.AncRxPollFrameProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = AncRxPollFrameProcess &rArr; AncWriteSendData &rArr; DwtWriteTxData &rArr; DWT_WriteTxfCtrl &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxTimeStamp_u64
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_StartTx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxAfterTxDelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetDelayedTRxTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPollAckData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncWriteSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncDataFrameProcess
</UL>

<P><STRONG><a name="[a9]"></a>AncWriteSendData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uwb_anchor.o(i.AncWriteSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AncWriteSendData &rArr; DwtWriteTxData &rArr; DWT_WriteTxfCtrl &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DwtWriteTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
</UL>

<P><STRONG><a name="[ad]"></a>AnchorIdInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uwb_anchor.o(i.AnchorIdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AnchorIdInit &rArr; DWT_SetAddress16 &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUwbId
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetAddress16
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnchorAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxParaProcess
</UL>

<P><STRONG><a name="[194]"></a>AngleSensorCalibrateXYFunction</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, angle_sensor.o(i.AngleSensorCalibrateXYFunction))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[b1]"></a>AngleSensorInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, angle_sensor.o(i.AngleSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = AngleSensorInit &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensor_Task
</UL>

<P><STRONG><a name="[70]"></a>AngleSensorMNG_Task</STRONG> (Thumb, 518 bytes, Stack size 112 bytes, angle_sensor.o(i.AngleSensorMNG_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AngleSensorMNG_Task &rArr; CanLeftPeriodProc &rArr; STM32_CAN_Write &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevID
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CAN_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeartData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransAngleHeartBeatProc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLeftPeriodProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[bc]"></a>AngleSensorSampleXYZProc</STRONG> (Thumb, 2074 bytes, Stack size 80 bytes, angle_sensor.o(i.AngleSensorSampleXYZProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = AngleSensorSampleXYZProc &rArr; MPU6500_dmp_get_euler_angle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_dmp_get_euler_angle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterAndSumMpu6500
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensor_Task
</UL>

<P><STRONG><a name="[71]"></a>AngleSensor_Task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, angle_sensor.o(i.AngleSensor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = AngleSensor_Task &rArr; AngleSensorSampleXYZProc &rArr; MPU6500_dmp_get_euler_angle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorSampleXYZProc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[6c]"></a>AppTaskBeep</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, beep_app.o(i.AppTaskBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = AppTaskBeep &rArr; bsp_InitBeep &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBeep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentBeepSta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[6d]"></a>AppTaskLight</STRONG> (Thumb, 2838 bytes, Stack size 16 bytes, led_app.o(i.AppTaskLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AppTaskLight &rArr; ctrlUledTabValue_RED &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_PowerOff
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfLightFlagChange
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentLightType
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_Internal_GCK
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D8_D1_D2_D3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D8_D1_D2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D7_D8_D1_D2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D7_D8_D1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D6_D7_D8_D1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D6_D7_D8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D5_D6_D7_D8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D5_D6_D7
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D4_D5_D6_D7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D4_D5_D6
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D3_D4_D5_D6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D3_D4_D5
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D2_D3_D4_D5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D2_D3_D4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D1_D2_D3_D4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D1_D2_D3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D7_D8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D7
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D6
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D5_D6
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D5
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D3_D4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D3
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D2_D4_D6_D8
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D3_D5_D7
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7_D8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_RED
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_GREEN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_BLUE
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValueBreathe
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnUledPro
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffAllUledPro
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, l4can.o(i.CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = CAN0_RX0_IRQHandler &rArr; CAN_BusRxDataCallback &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BusRxDataCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>CAN_BusRxDataCallback</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, can_bus.o(i.CAN_BusRxDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = CAN_BusRxDataCallback &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCanDriData
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>CAN_Config</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, l4can.o(i.CAN_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAN_Config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTrsDummy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[20f]"></a>CRC_8</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, can_app.o(i.CRC_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC_8
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUwbData
</UL>

<P><STRONG><a name="[102]"></a>CanAppInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, can_app.o(i.CanAppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CanAppInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevID
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[106]"></a>CanBufferDataInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, can_buf.o(i.CanBufferDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CanBufferDataInit &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTx_Task
</UL>

<P><STRONG><a name="[127]"></a>CanBufferRead</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, can_buf.o(i.CanBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanBufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTx_Task
</UL>

<P><STRONG><a name="[109]"></a>CanBufferWrite</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, can_buf.o(i.CanBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReportInfo
</UL>

<P><STRONG><a name="[103]"></a>CanBusDataInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, can_bus.o(i.CanBusDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CanBusDataInit &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAppInit
</UL>

<P><STRONG><a name="[10a]"></a>CanGpioInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, l4can.o(i.CanGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanGpioInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[b8]"></a>CanLeftPeriodProc</STRONG> (Thumb, 492 bytes, Stack size 64 bytes, angle_sensor.o(i.CanLeftPeriodProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = CanLeftPeriodProc &rArr; STM32_CAN_Write &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CAN_Write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
</UL>

<P><STRONG><a name="[117]"></a>CanRecvProgProc</STRONG> (Thumb, 1250 bytes, Stack size 32 bytes, caniap.o(i.CanRecvProgProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = CanRecvProgProc &rArr; IapWriteBuf &rArr; InFlashWriteBuf &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[120]"></a>CanRxParaProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uwb_anchor.o(i.CanRxParaProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CanRxParaProcess &rArr; AnchorIdInit &rArr; DWT_SetAddress16 &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnchorIdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
</UL>

<P><STRONG><a name="[121]"></a>CanRxProc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, can_app.o(i.CanRxProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = CanRxProc &rArr; NormalCanRxProc &rArr; CanRcvWlSendProc &rArr; WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRx_Task
</UL>

<P><STRONG><a name="[67]"></a>CanRx_Task</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, can_app.o(i.CanRx_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = CanRx_Task &rArr; CanRxProc &rArr; NormalCanRxProc &rArr; CanRcvWlSendProc &rArr; WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevBusRead
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxProc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_app.o(i.CanAppInit)
</UL>
<P><STRONG><a name="[b9]"></a>CanTransAngleHeartBeatProc</STRONG> (Thumb, 182 bytes, Stack size 44 bytes, angle_sensor.o(i.CanTransAngleHeartBeatProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanTransAngleHeartBeatProc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
</UL>

<P><STRONG><a name="[101]"></a>CanTrsDummy</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, l4can.o(i.CanTrsDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanTrsDummy &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
</UL>

<P><STRONG><a name="[68]"></a>CanTx_Task</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, can_app.o(i.CanTx_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = CanTx_Task &rArr; SendUwbData &rArr; CRC_8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CAN_Write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBufferRead
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBufferDataInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUwbData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_app.o(i.CanAppInit)
</UL>
<P><STRONG><a name="[22b]"></a>CheckIsReport</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, location_data_app.o(i.CheckIsReport))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
</UL>

<P><STRONG><a name="[228]"></a>CheckTagOffLine</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, location_data_app.o(i.CheckTagOffLine))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
</UL>

<P><STRONG><a name="[22a]"></a>CheckTagState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_app.o(i.CheckTagState))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
</UL>

<P><STRONG><a name="[129]"></a>ClrBreatheSta</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dm633.o(i.ClrBreatheSta))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCurrentLightSta
</UL>

<P><STRONG><a name="[215]"></a>ClrCurrentBeepSta</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, beep_app.o(i.ClrCurrentBeepSta))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[128]"></a>ClrCurrentLightSta</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, led_app.o(i.ClrCurrentLightSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClrCurrentLightSta
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentLightType
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBreatheSta
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12a]"></a>DECA_Sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_sleep.o(i.DECA_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DECA_Sleep &rArr; sleep_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_LoadUcodeFromRom
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SoftReset
</UL>

<P><STRONG><a name="[c5]"></a>DM633Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dm633.o(i.DM633Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DM633Init &rArr; bsp_InitSWD &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSWD
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM634_GBC
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_Internal_GCK
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[cd]"></a>DM633_Internal_GCK</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, bsp_iic.o(i.DM633_Internal_GCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DM633_Internal_GCK
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633Init
</UL>

<P><STRONG><a name="[12d]"></a>DM633_LATCH</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_iic.o(i.DM633_LATCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DM633_LATCH
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D8_D1_D2_D3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D8_D1_D2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D7_D8_D1_D2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D7_D8_D1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D6_D7_D8_D1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D6_D7_D8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D5_D6_D7_D8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D5_D6_D7
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D4_D5_D6_D7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D4_D5_D6
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D3_D4_D5_D6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D3_D4_D5
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D2_D3_D4_D5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D2_D3_D4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D1_D2_D3_D4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D1_D2_D3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D7_D8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D7
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D6
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D5_D6
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D5
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D3_D4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D3
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D2_D4_D6_D8
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D3_D5_D7
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7_D8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_RED
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_GREEN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_BLUE
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValueBreathe
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnUledPro
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffAllUledPro
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633Init
</UL>

<P><STRONG><a name="[12e]"></a>DM634_GBC</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, bsp_iic.o(i.DM634_GBC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DM634_GBC
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633Init
</UL>

<P><STRONG><a name="[130]"></a>DW1000GpioInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, port.o(i.DW1000GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DW1000GpioInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[134]"></a>DW1000SemInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dw1000_bus.o(i.DW1000SemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DW1000SemInit &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[135]"></a>DWT_Configure</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, deca_device.o(i.DWT_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DWT_Configure &rArr; _DWT_Configlde &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_Configlde
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ConfigureTxRF
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000InitConfig
</UL>

<P><STRONG><a name="[139]"></a>DWT_ConfigureTxRF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, deca_device.o(i.DWT_ConfigureTxRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_ConfigureTxRF &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Configure
</UL>

<P><STRONG><a name="[13b]"></a>DWT_EnableFrameFilter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, deca_device.o(i.DWT_EnableFrameFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DWT_EnableFrameFilter &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[13d]"></a>DWT_ForceTRxOff</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, deca_device.o(i.DWT_ForceTRxOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexON
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexOFF
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;else_err_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
</UL>

<P><STRONG><a name="[21f]"></a>DWT_GetPartID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(i.DWT_GetPartID))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[141]"></a>DWT_Initialise</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, deca_device.o(i.DWT_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DWT_Initialise &rArr; _DWT_OTP_Read &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_OTP_Read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_LoadUcodeFromRom
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_EnableClocks
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SoftReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetXtalTrim
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadDevID
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[148]"></a>DWT_Read16BitOffsetReg</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, deca_device.o(i.DWT_Read16BitOffsetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DWT_Read16BitOffsetReg &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_StartTx
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
</UL>

<P><STRONG><a name="[13c]"></a>DWT_Read32BitOffsetReg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, deca_device.o(i.DWT_Read32BitOffsetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DWT_Read32BitOffsetReg &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxAfterTxDelay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetInterrupt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetAutoRxReEnable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_EnableFrameFilter
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_OTP_Read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadDevID
</UL>

<P><STRONG><a name="[14a]"></a>DWT_Read8BitOffsetReg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, deca_device.o(i.DWT_Read8BitOffsetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DWT_Read8BitOffsetReg &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
</UL>

<P><STRONG><a name="[142]"></a>DWT_ReadDevID</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(i.DWT_ReadDevID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_ReadDevID &rArr; DWT_Read32BitOffsetReg &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
</UL>

<P><STRONG><a name="[149]"></a>DWT_ReadFromDevice</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, deca_device.o(i.DWT_ReadFromDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadRxData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_EnableClocks
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadTxTimestamp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadRxTimeStamp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read8BitOffsetReg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read16BitOffsetReg
</UL>

<P><STRONG><a name="[14c]"></a>DWT_ReadRxData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, deca_device.o(i.DWT_ReadRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DWT_ReadRxData &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbRxOkCb
</UL>

<P><STRONG><a name="[14d]"></a>DWT_ReadRxTimeStamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.DWT_ReadRxTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DWT_ReadRxTimeStamp &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxTimeStamp_u64
</UL>

<P><STRONG><a name="[14e]"></a>DWT_ReadTxTimestamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.DWT_ReadTxTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DWT_ReadTxTimestamp &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTxTimeStamp_u64
</UL>

<P><STRONG><a name="[96]"></a>DWT_RxEnable</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, deca_device.o(i.DWT_RxEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read8BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_conf_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_to_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_err_cb
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;else_err_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxElseBeaconProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartRxProcess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncDataFrameProcess
</UL>

<P><STRONG><a name="[14f]"></a>DWT_RxReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(i.DWT_RxReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_RxReset &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;else_err_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
</UL>

<P><STRONG><a name="[af]"></a>DWT_SetAddress16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.DWT_SetAddress16))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_SetAddress16 &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnchorIdInit
</UL>

<P><STRONG><a name="[150]"></a>DWT_SetAutoRxReEnable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, deca_device.o(i.DWT_SetAutoRxReEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DWT_SetAutoRxReEnable &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[ab]"></a>DWT_SetDelayedTRxTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.DWT_SetDelayedTRxTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_SetDelayedTRxTime &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDelayTxTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
</UL>

<P><STRONG><a name="[151]"></a>DWT_SetEUI</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.DWT_SetEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DWT_SetEUI &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteToDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000InitConfig
</UL>

<P><STRONG><a name="[153]"></a>DWT_SetInterrupt</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, deca_device.o(i.DWT_SetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DWT_SetInterrupt &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexON
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexOFF
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[154]"></a>DWT_SetPanID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.DWT_SetPanID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_SetPanID &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000InitConfig
</UL>

<P><STRONG><a name="[aa]"></a>DWT_SetRxAfterTxDelay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deca_device.o(i.DWT_SetRxAfterTxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DWT_SetRxAfterTxDelay &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
</UL>

<P><STRONG><a name="[155]"></a>DWT_SetRxAntennaDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.DWT_SetRxAntennaDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_SetRxAntennaDelay &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000InitConfig
</UL>

<P><STRONG><a name="[95]"></a>DWT_SetRxTimeOut</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, deca_device.o(i.DWT_SetRxTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DWT_SetRxTimeOut &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read8BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_conf_cb
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_to_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_err_cb
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;else_err_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxElseBeaconProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartRxProcess
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncDataFrameProcess
</UL>

<P><STRONG><a name="[156]"></a>DWT_SetTxAntennaDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.DWT_SetTxAntennaDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DWT_SetTxAntennaDelay &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000InitConfig
</UL>

<P><STRONG><a name="[146]"></a>DWT_SetXtalTrim</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, deca_device.o(i.DWT_SetXtalTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DWT_SetXtalTrim &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
</UL>

<P><STRONG><a name="[143]"></a>DWT_SoftReset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, deca_device.o(i.DWT_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DWT_SoftReset &rArr; _dwt_disablesequencing &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECA_Sleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_aOnArrayUpload
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
</UL>

<P><STRONG><a name="[a0]"></a>DWT_StartTx</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, deca_device.o(i.DWT_StartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DWT_StartTx &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
</UL>

<P><STRONG><a name="[137]"></a>DWT_Write16BitOffsetReg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, deca_device.o(i.DWT_Write16BitOffsetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteToDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetAddress16
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_OTP_Read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_LoadUcodeFromRom
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_Configlde
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SoftReset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetTxAntennaDelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxAntennaDelay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetPanID
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Configure
</UL>

<P><STRONG><a name="[136]"></a>DWT_Write32BitOffsetReg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, deca_device.o(i.DWT_Write32BitOffsetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteToDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteTxfCtrl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxAfterTxDelay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetInterrupt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetDelayedTRxTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetAutoRxReEnable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_EnableFrameFilter
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ConfigureTxRF
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Configure
</UL>

<P><STRONG><a name="[13a]"></a>DWT_Write8BitOffsetReg</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, deca_device.o(i.DWT_Write8BitOffsetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteToDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_StartTx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_aOnArrayUpload
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_OTP_Read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_Configlde
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SoftReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetXtalTrim
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ConfigureTxRF
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Configure
</UL>

<P><STRONG><a name="[152]"></a>DWT_WriteToDevice</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, deca_device.o(i.DWT_WriteToDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteTxData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_EnableClocks
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetEUI
</UL>

<P><STRONG><a name="[9e]"></a>DWT_WriteTxData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, deca_device.o(i.DWT_WriteTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DWT_WriteTxData &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteToDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DwtWriteTxData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
</UL>

<P><STRONG><a name="[9f]"></a>DWT_WriteTxfCtrl</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, deca_device.o(i.DWT_WriteTxfCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DWT_WriteTxfCtrl &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DwtWriteTxData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
</UL>

<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>DecaMutexOFF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_mutex.o(i.DecaMutexOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DecaMutexOFF &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetInterrupt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
</UL>

<P><STRONG><a name="[13e]"></a>DecaMutexON</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, deca_mutex.o(i.DecaMutexON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DecaMutexON &rArr; EXTI_GetITEnStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITEnStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetInterrupt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
</UL>

<P><STRONG><a name="[15c]"></a>DelDistBufData</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, uwb_anchor.o(i.DelDistBufData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DelDistBufData
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dist_Delete_List
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataProcess
</UL>

<P><STRONG><a name="[15e]"></a>DelayUs</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rfid_cc1101.o(i.DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
</UL>

<P><STRONG><a name="[15f]"></a>DeleteSecondListData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, location_data_app.o(i.DeleteSecondListData))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = DeleteSecondListData &rArr; TagOffLineProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagOffLineProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistDataBuf
</UL>

<P><STRONG><a name="[124]"></a>DevBusRead</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, can_bus.o(i.DevBusRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = DevBusRead &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRx_Task
</UL>

<P><STRONG><a name="[161]"></a>DevID_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, main.o(i.DevID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DevID_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[163]"></a>DistBufDataCount</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, uwb_anchor.o(i.DistBufDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DistBufDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxDistProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataProcess
</UL>

<P><STRONG><a name="[165]"></a>DistDataStrInit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uwb_anchor.o(i.DistDataStrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DistDataStrInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistDataBuf
</UL>

<P><STRONG><a name="[15d]"></a>Dist_Delete_List</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uwb_anchor.o(i.Dist_Delete_List))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelDistBufData
</UL>

<P><STRONG><a name="[166]"></a>Dist_ListDataInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uwb_anchor.o(i.Dist_ListDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dist_ListDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[167]"></a>Dw1000Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dw1000_bus.o(i.Dw1000Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Dw1000Init &rArr; DW1000GpioInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_DW1000
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000SemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[169]"></a>Dw1000InitConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dw1000_bus.o(i.Dw1000InitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Dw1000InitConfig &rArr; DWT_Configure &rArr; _DWT_Configlde &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DW1000_SetRateHigh
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetTxAntennaDelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxAntennaDelay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetPanID
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetEUI
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[a6]"></a>DwLocSucProcess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwb_anchor.o(i.DwLocSucProcess))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
</UL>

<P><STRONG><a name="[ac]"></a>DwtWriteTxData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dw1000_bus.o(i.DwtWriteTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DwtWriteTxData &rArr; DWT_WriteTxfCtrl &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteTxfCtrl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncWriteSendData
</UL>

<P><STRONG><a name="[29]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 88 bytes, rfid_cc1101.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = EXTI2_IRQHandler &rArr; RfidReadFifoProc &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rfid_cc1101.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EXTI3_IRQHandler &rArr; RfidReadStatusReg &rArr; SpiMcuRead &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, port.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; dwt_isr &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, angle_sensor.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = EXTI5_9_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15a]"></a>EXTI_GetITEnStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, port.o(i.EXTI_GetITEnStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_GetITEnStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexON
</UL>

<P><STRONG><a name="[17d]"></a>EnterPeopleAdd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, location_data_app.o(i.EnterPeopleAdd))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstAddProcess
</UL>

<P><STRONG><a name="[176]"></a>Error_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Error_Handler &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[218]"></a>ExitPeoplePlus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, location_data_app.o(i.ExitPeoplePlus))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagOffLineProcess
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagExitProcess
</UL>

<P><STRONG><a name="[177]"></a>FLASH_ErasePage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, l4x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
</UL>

<P><STRONG><a name="[11e]"></a>FLASH_Lock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l4x_flash.o(i.FLASH_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>

<P><STRONG><a name="[118]"></a>FLASH_SetLatency</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, l4x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_wscnt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>

<P><STRONG><a name="[119]"></a>FLASH_Unlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l4x_flash.o(i.FLASH_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>

<P><STRONG><a name="[be]"></a>FilterAndSumMpu6500</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, angle_sensor.o(i.FilterAndSumMpu6500))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FilterAndSumMpu6500
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorSampleXYZProc
</UL>

<P><STRONG><a name="[a3]"></a>FinalMsgGetTS_64</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, uwb_common.o(i.FinalMsgGetTS_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FinalMsgGetTS_64
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
</UL>

<P><STRONG><a name="[9d]"></a>FinalMsgSetTS</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uwb_common.o(i.FinalMsgSetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FinalMsgSetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
</UL>

<P><STRONG><a name="[17c]"></a>FirstAddProcess</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, location_data_app.o(i.FirstAddProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = FirstAddProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oList_Write_data
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReportInfo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTagData
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPeopleNum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPeopleAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
</UL>

<P><STRONG><a name="[9b]"></a>GetBeaconAckDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uwb_anchor.o(i.GetBeaconAckDelay))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
</UL>

<P><STRONG><a name="[23a]"></a>GetColorNum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dm633.o(i.GetColorNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetColorNum
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValueBreathe
</UL>

<P><STRONG><a name="[c2]"></a>GetCurrentBeepSta</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, beep_app.o(i.GetCurrentBeepSta))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskBeep
</UL>

<P><STRONG><a name="[c7]"></a>GetCurrentLightType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_app.o(i.GetCurrentLightType))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCurrentLightSta
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[21c]"></a>GetDistBufPoint</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uwb_anchor.o(i.GetDistBufPoint))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataProcess
</UL>

<P><STRONG><a name="[8f]"></a>GetDistDataBuf</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uwb_anchor.o(i.GetDistDataBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = GetDistDataBuf &rArr; DeleteSecondListData &rArr; TagOffLineProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSecondListData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDistDataPro
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistDataStrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDistData
</UL>

<P><STRONG><a name="[90]"></a>GetDistDataEqualBuf</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uwb_anchor.o(i.GetDistDataEqualBuf))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDistData
</UL>

<P><STRONG><a name="[210]"></a>GetDistDataPoint</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uwb_anchor.o(i.GetDistDataPoint))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPollAckData
</UL>

<P><STRONG><a name="[180]"></a>GetPeopleNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, location_data_app.o(i.GetPeopleNum))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagOffLineProcess
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagExitProcess
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartReportProcess
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstAddProcess
</UL>

<P><STRONG><a name="[211]"></a>GetRelativeRealDist</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, uwb_anchor.o(i.GetRelativeRealDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetRelativeRealDist
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPollAckData
</UL>

<P><STRONG><a name="[182]"></a>GetRfidCurStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfid_driver.o(i.GetRfidCurStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GetRfidCurStatus &rArr; RfidGetTxStatus &rArr; RfidStrobe &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
</UL>

<P><STRONG><a name="[9a]"></a>GetRxTimeStamp_u64</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dw1000_bus.o(i.GetRxTimeStamp_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetRxTimeStamp_u64 &rArr; DWT_ReadRxTimeStamp &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadRxTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
</UL>

<P><STRONG><a name="[a2]"></a>GetTxTimeStamp_u64</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dw1000_bus.o(i.GetTxTimeStamp_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetTxTimeStamp_u64 &rArr; DWT_ReadTxTimestamp &rArr; DWT_ReadFromDevice &rArr; ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadTxTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
</UL>

<P><STRONG><a name="[ae]"></a>GetUwbId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_app.o(i.GetUwbId))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnchorIdInit
</UL>

<P><STRONG><a name="[18e]"></a>GetUwbReportTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_app.o(i.GetUwbReportTime))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartReportProcess
</UL>

<P><STRONG><a name="[225]"></a>GetWLMId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_app.o(i.GetWLMId))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_ReceiveData
</UL>

<P><STRONG><a name="[b7]"></a>Get_DevID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Get_DevID))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAppInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[24b]"></a>Get_Timer2_ms</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mpu.o(i.Get_Timer2_ms))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[184]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dw1000_bus.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; dwt_isr &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; dwt_isr &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[214]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[186]"></a>HAL_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = HAL_Init &rArr; systick_config &rArr; Error_Handler &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[189]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, spi_bus.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
</UL>

<P><STRONG><a name="[18c]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, spi_bus.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromSPI
</UL>

<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18d]"></a>HeartReportProcess</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, location_data_app.o(i.HeartReportProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = HeartReportProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReportInfo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUwbReportTime
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPeopleNum
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
</UL>

<P><STRONG><a name="[11a]"></a>IapEraserSector</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, iapupdate.o(i.IapEraserSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IapEraserSector &rArr; InFlashErasePage &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
</UL>

<P><STRONG><a name="[11c]"></a>IapExFlashCrc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, iapupdate.o(i.IapExFlashCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IapExFlashCrc &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
</UL>

<P><STRONG><a name="[11f]"></a>IapJumpToBoot</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, iapupdate.o(i.IapJumpToBoot))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[11d]"></a>IapReadBuf</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, iapupdate.o(i.IapReadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
</UL>

<P><STRONG><a name="[11b]"></a>IapWriteBuf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, iapupdate.o(i.IapWriteBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IapWriteBuf &rArr; InFlashWriteBuf &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashWriteBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
</UL>

<P><STRONG><a name="[d0]"></a>IfLightFlagChange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_app.o(i.IfLightFlagChange))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[18f]"></a>InFlashErasePage</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, l4x_flash.o(i.InFlashErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InFlashErasePage &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
</UL>

<P><STRONG><a name="[190]"></a>InFlashReadBuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, iapupdate.o(i.InFlashReadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
</UL>

<P><STRONG><a name="[191]"></a>InFlashWriteBuf</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, l4x_flash.o(i.InFlashWriteBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InFlashWriteBuf &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
</UL>

<P><STRONG><a name="[122]"></a>InitCanRxProc</STRONG> (Thumb, 3406 bytes, Stack size 200 bytes, can_app.o(i.InitCanRxProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = InitCanRxProc &rArr; CanRcvWlSendProc &rArr; WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevID
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLightType
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CAN_Write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_PowerOn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorCalibrateXYFunction
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAngleData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvWlSendProc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvSetPar
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvIrMatchProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvBusProc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxProc
</UL>

<P><STRONG><a name="[198]"></a>InitMPU6050</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mpu6500_driver.o(i.InitMPU6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = InitMPU6050 &rArr; MPU6500_Set_Rate &rArr; MPU6500_Set_LPF &rArr; MPU6500_write_byte &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_read_byte
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_Rate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_Gyro_Fsr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_Accel_Fsr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_PORT_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500Init
</UL>

<P><STRONG><a name="[1a0]"></a>IsMessageForRfidRcved</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wireless.o(i.IsMessageForRfidRcved))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = IsMessageForRfidRcved &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_MNG_Task
</UL>

<P><STRONG><a name="[cc]"></a>Led_PowerOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_app.o(i.Led_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[195]"></a>Led_PowerOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_app.o(i.Led_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[1a1]"></a>LocationDataAppInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, location_data_app.o(i.LocationDataAppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LocationDataAppInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oListDataInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[bf]"></a>LogicInit</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, logic.o(i.LogicInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LogicInit &rArr; LogicRunInfSaveProc &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensor_Task
</UL>

<P><STRONG><a name="[b2]"></a>LogicParamApi</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, logic.o(i.LogicParamApi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
</UL>

<P><STRONG><a name="[1a5]"></a>LogicParamSaveProc</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, logic.o(i.LogicParamSaveProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LogicParamSaveProc &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSaveParamMsgProc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInit
</UL>

<P><STRONG><a name="[b3]"></a>LogicRunInfApi</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, logic.o(i.LogicRunInfApi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensor_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAngleData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLeftPeriodProc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorSampleXYZProc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
</UL>

<P><STRONG><a name="[1a6]"></a>LogicRunInfSaveProc</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, logic.o(i.LogicRunInfSaveProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LogicRunInfSaveProc &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetWorkModeProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetReportIntervalProc
</UL>

<P><STRONG><a name="[c0]"></a>MPU6500Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, angle_sensor.o(i.MPU6500Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = MPU6500Init &rArr; MPU6500_DMP_Init &rArr; MPU6500_run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Port_EXIT_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensor_Task
</UL>

<P><STRONG><a name="[1a8]"></a>MPU6500_DMP_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, mpu6500_driver.o(i.MPU6500_DMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = MPU6500_DMP_Init &rArr; MPU6500_run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_run_self_test
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500Init
</UL>

<P><STRONG><a name="[1b5]"></a>MPU6500_I2C_NoAck</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_I2C_NoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MPU6500_I2C_NoAck &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>

<P><STRONG><a name="[199]"></a>MPU6500_I2C_PORT_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_I2C_PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MPU6500_I2C_PORT_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>

<P><STRONG><a name="[1b8]"></a>MPU6500_I2C_ack</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_I2C_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MPU6500_I2C_ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_read_byte
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>

<P><STRONG><a name="[1b9]"></a>MPU6500_I2C_check_ack</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_I2C_check_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MPU6500_I2C_check_ack &rArr; MPU6500_I2C_stop &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_read_byte
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>

<P><STRONG><a name="[1b7]"></a>MPU6500_I2C_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpu6500_driver.o(i.MPU6500_I2C_delay))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_write_char
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_start
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_read_char
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_ack
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_NoAck
</UL>

<P><STRONG><a name="[1bb]"></a>MPU6500_I2C_read_char</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mpu6500_driver.o(i.MPU6500_I2C_read_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MPU6500_I2C_read_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_read_byte
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>

<P><STRONG><a name="[1bc]"></a>MPU6500_I2C_start</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_I2C_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MPU6500_I2C_start &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_read_byte
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>

<P><STRONG><a name="[1ba]"></a>MPU6500_I2C_stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_I2C_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MPU6500_I2C_stop &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_read_byte
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>

<P><STRONG><a name="[1bd]"></a>MPU6500_I2C_write_char</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mpu6500_driver.o(i.MPU6500_I2C_write_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_read_byte
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>

<P><STRONG><a name="[1a7]"></a>MPU6500_Port_EXIT_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_Port_EXIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU6500_Port_EXIT_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500Init
</UL>

<P><STRONG><a name="[1be]"></a>MPU6500_Read_Len</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mpu6500_driver.o(i.MPU6500_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU6500_Read_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_write_char
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_start
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_read_char
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_ack
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_NoAck
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[19d]"></a>MPU6500_Set_Accel_Fsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU6500_Set_Accel_Fsr &rArr; MPU6500_write_byte &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>

<P><STRONG><a name="[19c]"></a>MPU6500_Set_Gyro_Fsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu6500_driver.o(i.MPU6500_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU6500_Set_Gyro_Fsr &rArr; MPU6500_write_byte &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>

<P><STRONG><a name="[1bf]"></a>MPU6500_Set_LPF</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu6500_driver.o(i.MPU6500_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MPU6500_Set_LPF &rArr; MPU6500_write_byte &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_Rate
</UL>

<P><STRONG><a name="[19e]"></a>MPU6500_Set_Rate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu6500_driver.o(i.MPU6500_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MPU6500_Set_Rate &rArr; MPU6500_Set_LPF &rArr; MPU6500_write_byte &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_write_byte
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>

<P><STRONG><a name="[1c0]"></a>MPU6500_Write_Len</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mpu6500_driver.o(i.MPU6500_Write_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_write_char
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_start
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[bd]"></a>MPU6500_dmp_get_euler_angle</STRONG> (Thumb, 544 bytes, Stack size 112 bytes, mpu6500_driver.o(i.MPU6500_dmp_get_euler_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MPU6500_dmp_get_euler_angle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorSampleXYZProc
</UL>

<P><STRONG><a name="[19f]"></a>MPU6500_read_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mpu6500_driver.o(i.MPU6500_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPU6500_read_byte &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_write_char
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_start
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_read_char
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
</UL>

<P><STRONG><a name="[1b2]"></a>MPU6500_run_self_test</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, mpu6500_driver.o(i.MPU6500_run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MPU6500_run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[19a]"></a>MPU6500_write_byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu6500_driver.o(i.MPU6500_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPU6500_write_byte &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_write_char
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_start
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_Rate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_LPF
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_Gyro_Fsr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Set_Accel_Fsr
</UL>

<P><STRONG><a name="[1ca]"></a>MX_SPI1_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, l4spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_SPI1_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiBusInit
</UL>

<P><STRONG><a name="[164]"></a>MaxDistProcess</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uwb_anchor.o(i.MaxDistProcess))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistBufDataCount
</UL>

<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>MessageForRfidRcved</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wireless.o(i.MessageForRfidRcved))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = MessageForRfidRcved &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wireless.o(i.WL_MNG_Task)
</UL>
<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[227]"></a>NewCanTxSn</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wireless.o(i.NewCanTxSn))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
</UL>

<P><STRONG><a name="[17e]"></a>NewTagData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, location_data_app.o(i.NewTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NewTagData
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstAddProcess
</UL>

<P><STRONG><a name="[123]"></a>NormalCanRxProc</STRONG> (Thumb, 3470 bytes, Stack size 200 bytes, can_app.o(i.NormalCanRxProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = NormalCanRxProc &rArr; CanRcvWlSendProc &rArr; WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevID
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLightType
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CAN_Write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_PowerOn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorCalibrateXYFunction
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAngleData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvWlSendProc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvSetPar
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvIrMatchProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvBusProc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxParaProcess
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRxProc
</UL>

<P><STRONG><a name="[1ce]"></a>OSInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>OSInitHookBegin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d6]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16c]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_MNG_Task
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusDataInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBufferDataInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRx_Task
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000SemInit
</UL>

<P><STRONG><a name="[126]"></a>OSSemPend</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevBusRead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTx_Task
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUwbStartSem
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMessageForRfidRcved
</UL>

<P><STRONG><a name="[a1]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_conf_cb
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBufferWrite
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageForRfidRcved
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BusRxDataCallback
</UL>

<P><STRONG><a name="[1de]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ec]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1e0]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[104]"></a>OSTaskCreateExt</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocationDataAppInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAppInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[1ed]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1e3]"></a>OSTaskDel</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1e6]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1ee]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[105]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocationDataAppInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAppInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[ba]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(i.OSTaskQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[bb]"></a>OSTaskResume</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_task.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
</UL>

<P><STRONG><a name="[1ef]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1e1]"></a>OSTaskStkInit</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[197]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[64]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAppTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskBeep
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensor_Task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValueBreathe
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecvProgProc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTx_Task
</UL>

<P><STRONG><a name="[1e8]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e9]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1e5]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1dd]"></a>OS_EventTaskRdy</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[1dc]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1da]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[1d9]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[1d4]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e4]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(i.OS_FlagUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1ea]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[1e7]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_MemCopy))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[1db]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[1e2]"></a>OS_TCBInit</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[6b]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[6a]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[1f0]"></a>RFCtrlSetIDLE</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RFCtrlSetIDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = RFCtrlSetIDLE &rArr; RfidReadStatusReg &rArr; SpiMcuRead &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
</UL>

<P><STRONG><a name="[1f1]"></a>RFID_GetFrame</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RFID_GetFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RFID_GetFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_ReceiveData
</UL>

<P><STRONG><a name="[1f2]"></a>RFID_HardwareInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rfid_cc1101.o(i.RFID_HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidChipReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
</UL>

<P><STRONG><a name="[1f5]"></a>RFID_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfid_driver.o(i.RFID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HardwareInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGDOxIntInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_MNG_Task
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
</UL>

<P><STRONG><a name="[1f9]"></a>RFID_SPI_SendByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RFID_SPI_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFID_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
</UL>

<P><STRONG><a name="[1fc]"></a>RFID_SendData</STRONG> (Thumb, 68 bytes, Stack size 96 bytes, rfid_driver.o(i.RFID_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_SendData
</UL>

<P><STRONG><a name="[1fd]"></a>RFTxSendPacket</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RFTxSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteFifo
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendData
</UL>

<P><STRONG><a name="[14b]"></a>ReadFromSPI</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spi_bus.o(i.ReadFromSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadFromSPI &rArr; HAL_SPI_TransmitReceive &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiBusError_Handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>

<P><STRONG><a name="[168]"></a>Reset_DW1000</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.Reset_DW1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Reset_DW1000 &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[97]"></a>RestartRxProcess</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uwb_anchor.o(i.RestartRxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RestartRxProcess &rArr; DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncErrorProcess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncDataFrameProcess
</UL>

<P><STRONG><a name="[1f3]"></a>RfidChipReset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfid_cc1101.o(i.RfidChipReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RfidChipReset &rArr; RfidStrobe &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HardwareInit
</UL>

<P><STRONG><a name="[1f4]"></a>RfidConfig</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, rfid_cc1101.o(i.RfidConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HardwareInit
</UL>

<P><STRONG><a name="[1f7]"></a>RfidGDOxIntInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rfid_driver.o(i.RfidGDOxIntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RfidGDOxIntInit &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
</UL>

<P><STRONG><a name="[183]"></a>RfidGetTxStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfid_cc1101.o(i.RfidGetTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RfidGetTxStatus &rArr; RfidStrobe &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
</UL>

<P><STRONG><a name="[202]"></a>RfidReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RfidReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RfidReadFifo &rArr; SpiMcuRead &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
</UL>

<P><STRONG><a name="[170]"></a>RfidReadFifoProc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, rfid_cc1101.o(i.RfidReadFifoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RfidReadFifoProc &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifo
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>RfidReadStatusReg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RfidReadStatusReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RfidReadStatusReg &rArr; SpiMcuRead &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[204]"></a>RfidRxRegInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rfid_cc1101.o(i.RfidRxRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>

<P><STRONG><a name="[1f6]"></a>RfidSpiInit</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, rfid_driver.o(i.RfidSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RfidSpiInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_struct_para_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
</UL>

<P><STRONG><a name="[208]"></a>RfidSpiWrite</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rfid_cc1101.o(i.RfidSpiWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
</UL>

<P><STRONG><a name="[173]"></a>RfidStrobe</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RfidStrobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RfidStrobe &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetTxStatus
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidChipReset
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>

<P><STRONG><a name="[1ff]"></a>RfidWriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RfidWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RfidWriteFifo &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
</UL>

<P><STRONG><a name="[115]"></a>RfidWriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rfid_cc1101.o(i.RfidWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWlAddr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvSetPar
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRxRegInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HardwareInit
</UL>

<P><STRONG><a name="[20b]"></a>RxElseBeaconProcess</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uwb_anchor.o(i.RxElseBeaconProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RxElseBeaconProcess &rArr; DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbRxOkCb
</UL>

<P><STRONG><a name="[20c]"></a>SPI_ChangeRate</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, port.o(i.SPI_ChangeRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_ChangeRate
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DW1000_SetRateLow
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DW1000_SetRateHigh
</UL>

<P><STRONG><a name="[16a]"></a>SPI_DW1000_SetRateHigh</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, port.o(i.SPI_DW1000_SetRateHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_DW1000_SetRateHigh &rArr; SPI_ChangeRate
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ChangeRate
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000InitConfig
</UL>

<P><STRONG><a name="[20d]"></a>SPI_DW1000_SetRateLow</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, port.o(i.SPI_DW1000_SetRateLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_DW1000_SetRateLow &rArr; SPI_ChangeRate
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ChangeRate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[b5]"></a>STM32_CAN_Write</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, l4can.o(i.STM32_CAN_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STM32_CAN_Write &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTx_Task
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanLeftPeriodProc
</UL>

<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>SW_SendByte</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, bsp_iic.o(i.SW_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffAllUledPro
</UL>

<P><STRONG><a name="[112]"></a>SaveSRemoteCtrlInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wireless.o(i.SaveSRemoteCtrlInfo))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvWlSendProc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvIrMatchProc
</UL>

<P><STRONG><a name="[193]"></a>SendAngleData</STRONG> (Thumb, 1412 bytes, Stack size 48 bytes, can_app.o(i.SendAngleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SendAngleData &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[b4]"></a>SendHeartData</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, angle_sensor.o(i.SendHeartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendHeartData
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorMNG_Task
</UL>

<P><STRONG><a name="[125]"></a>SendUwbData</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, can_app.o(i.SendUwbData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SendUwbData &rArr; CRC_8
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReportInfo
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTx_Task
</UL>

<P><STRONG><a name="[b0]"></a>SetAnchorAddr</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, uwb_anchor.o(i.SetAnchorAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetAnchorAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnchorIdInit
</UL>

<P><STRONG><a name="[196]"></a>SetCurrentLightType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_app.o(i.SetCurrentLightType))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[9c]"></a>SetDelayTxTime</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uwb_anchor.o(i.SetDelayTxTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetDelayTxTime &rArr; DWT_SetDelayedTRxTime &rArr; DWT_Write32BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetDelayedTRxTime
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
</UL>

<P><STRONG><a name="[a7]"></a>SetFirstAddr</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, uwb_common.o(i.SetFirstAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetFirstAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
</UL>

<P><STRONG><a name="[a8]"></a>SetPollAckData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uwb_anchor.o(i.SetPollAckData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetPollAckData &rArr; GetRelativeRealDist
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRelativeRealDist
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistDataPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxPollFrameProcess
</UL>

<P><STRONG><a name="[1fe]"></a>SetRFChipIdle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rfid_cc1101.o(i.SetRFChipIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
</UL>

<P><STRONG><a name="[221]"></a>SetRcvedBackCallFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfid_driver.o(i.SetRcvedBackCallFunc))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_MNG_Task
</UL>

<P><STRONG><a name="[212]"></a>SetRfidSRX</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfid_driver.o(i.SetRfidSRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SetRfidSRX &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
</UL>

<P><STRONG><a name="[1f8]"></a>SetRxMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rfid_cc1101.o(i.SetRxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRxRegInit
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
</UL>

<P><STRONG><a name="[113]"></a>SetWlAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rfid_driver.o(i.SetWlAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SetWlAddr &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvSetPar
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvIrMatchProc
</UL>

<P><STRONG><a name="[200]"></a>SpiBusError_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_bus.o(i.SpiBusError_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromSPI
</UL>

<P><STRONG><a name="[213]"></a>SpiBusInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_bus.o(i.SpiBusInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SpiBusInit &rArr; MX_SPI1_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[201]"></a>SpiResetChipSingle</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rfid_cc1101.o(i.SpiResetChipSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpiResetChipSingle &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidChipReset
</UL>

<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gd32f30x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCurrentLightSta
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCurrentBeepSta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(.text)
</UL>
<P><STRONG><a name="[229]"></a>TagDataProcess</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, location_data_app.o(i.TagDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TagDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
</UL>

<P><STRONG><a name="[217]"></a>TagExitProcess</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, location_data_app.o(i.TagExitProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = TagExitProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReportInfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPeopleNum
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPeoplePlus
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
</UL>

<P><STRONG><a name="[160]"></a>TagOffLineProcess</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, location_data_app.o(i.TagOffLineProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = TagOffLineProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReportInfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPeopleNum
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPeoplePlus
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSecondListData
</UL>

<P><STRONG><a name="[78]"></a>TaskStart</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, main.o(i.TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TaskStart &rArr; DWT_Initialise &rArr; _DWT_OTP_Read &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiBusInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DW1000_SetRateLow
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_DW1000
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGpioInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAppInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevID_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c6]"></a>TurnOffAllUledPro</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dm633.o(i.TurnOffAllUledPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TurnOffAllUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SendByte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[c8]"></a>TurnOnUledPro</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dm633.o(i.TurnOnUledPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TurnOnUledPro &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[21b]"></a>UpdateDataProcess</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, location_data_app.o(i.UpdateDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = UpdateDataProcess &rArr; WriteTagData &rArr; FirstAddProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistBufPoint
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistBufDataCount
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelDistBufData
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAppTask
</UL>

<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UwbAnchorIrqTask</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, uwb_anchor.o(i.UwbAnchorIrqTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = UwbAnchorIrqTask &rArr; Dw1000InitConfig &rArr; DWT_Configure &rArr; _DWT_Configlde &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocationDataAppInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setcallbacks
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUwbStartSem
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUwbId
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000InitConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetInterrupt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetAutoRxReEnable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetAddress16
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxReset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetPartID
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_EnableFrameFilter
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnchorAddr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dist_ListDataInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[69]"></a>UwbAppTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, location_data_app.o(i.UwbAppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = UwbAppTask &rArr; UpdateDataProcess &rArr; WriteTagData &rArr; FirstAddProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataProcess
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> location_data_app.o(i.LocationDataAppInit)
</UL>
<P><STRONG><a name="[6f]"></a>WL_MNG_Task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wireless.o(i.WL_MNG_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WL_MNG_Task &rArr; Wl_RxDataProc &rArr; SetRfidSRX &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcvedBackCallFunc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMessageForRfidRcved
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlVarInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.TaskStart)
</UL>
<P><STRONG><a name="[224]"></a>WL_ReceiveData</STRONG> (Thumb, 88 bytes, Stack size 88 bytes, rfid_driver.o(i.WL_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = WL_ReceiveData &rArr; RFID_GetFrame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWLMId
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
</UL>

<P><STRONG><a name="[110]"></a>WL_SendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, rfid_driver.o(i.WL_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvWlSendProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvBusProc
</UL>

<P><STRONG><a name="[20a]"></a>WaitGPIOReset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rfid_cc1101.o(i.WaitGPIOReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
</UL>

<P><STRONG><a name="[21e]"></a>WaitUwbStartSem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, can_app.o(i.WaitUwbStartSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = WaitUwbStartSem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[223]"></a>Wl_RxDataProc</STRONG> (Thumb, 1318 bytes, Stack size 56 bytes, wireless.o(i.Wl_RxDataProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Wl_RxDataProc &rArr; SetRfidSRX &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_ReceiveData
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCanTxSn
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_MNG_Task
</UL>

<P><STRONG><a name="[91]"></a>WriteDistDataPro</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, uwb_anchor.o(i.WriteDistDataPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteDistDataPro
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDistDataBuf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDistData
</UL>

<P><STRONG><a name="[181]"></a>WriteReportInfo</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, can_app.o(i.WriteReportInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBufferWrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUwbData
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTagData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagOffLineProcess
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagExitProcess
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartReportProcess
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstAddProcess
</UL>

<P><STRONG><a name="[21d]"></a>WriteTagData</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, location_data_app.o(i.WriteTagData))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = WriteTagData &rArr; FirstAddProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReportInfo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTagState
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagOffLineProcess
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagExitProcess
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagDataProcess
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartReportProcess
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPeopleNum
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstAddProcess
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTagOffLine
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIsReport
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDataProcess
</UL>

<P><STRONG><a name="[159]"></a>WriteToSPI</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, spi_bus.o(i.WriteToSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiBusError_Handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexON
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexOFF
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteToDevice
</UL>

<P><STRONG><a name="[138]"></a>_DWT_Configlde</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, deca_device.o(i._DWT_Configlde))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DWT_Configlde &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Configure
</UL>

<P><STRONG><a name="[144]"></a>_DWT_EnableClocks</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, deca_device.o(i._DWT_EnableClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _DWT_EnableClocks &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_WriteToDevice
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_LoadUcodeFromRom
</UL>

<P><STRONG><a name="[147]"></a>_DWT_LoadUcodeFromRom</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_device.o(i._DWT_LoadUcodeFromRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DWT_LoadUcodeFromRom &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECA_Sleep
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_EnableClocks
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
</UL>

<P><STRONG><a name="[145]"></a>_DWT_OTP_Read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(i._DWT_OTP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _DWT_OTP_Read &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Initialise
</UL>

<P><STRONG><a name="[158]"></a>_DWT_aOnArrayUpload</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(i._DWT_aOnArrayUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DWT_aOnArrayUpload &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SoftReset
</UL>

<P><STRONG><a name="[22f]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1c3]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_dmp_get_euler_angle
</UL>

<P><STRONG><a name="[234]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1c4]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_dmp_get_euler_angle
</UL>

<P><STRONG><a name="[231]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[22c]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[235]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[22e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[230]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[278]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[279]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[27a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[22d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[157]"></a>_dwt_disablesequencing</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(i._dwt_disablesequencing))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _dwt_disablesequencing &rArr; DWT_Write16BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DWT_EnableClocks
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SoftReset
</UL>

<P><STRONG><a name="[236]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[c1]"></a>bsp_InitBeep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, beep_app.o(i.bsp_InitBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_InitBeep &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskBeep
</UL>

<P><STRONG><a name="[12c]"></a>bsp_InitSWD</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, bsp_iic.o(i.bsp_InitSWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_InitSWD &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633Init
</UL>

<P><STRONG><a name="[a5]"></a>caculate_distance</STRONG> (Thumb, 468 bytes, Stack size 88 bytes, uwb_anchor.o(i.caculate_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = caculate_distance &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncRxFinalFrameProcess
</UL>

<P><STRONG><a name="[fd]"></a>can_deinit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
</UL>

<P><STRONG><a name="[ff]"></a>can_filter_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
</UL>

<P><STRONG><a name="[fe]"></a>can_init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gd32f30x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
</UL>

<P><STRONG><a name="[100]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
</UL>

<P><STRONG><a name="[f6]"></a>can_message_receive</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>can_message_transmit</STRONG> (Thumb, 332 bytes, Stack size 12 bytes, gd32f30x_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CAN_Write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvWlSendProc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvIrMatchProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRcvBusProc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wl_RxDataProc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTrsDummy
</UL>

<P><STRONG><a name="[f5]"></a>can_receive_message_length_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_receive_message_length_get))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>can_struct_para_init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
</UL>

<P><STRONG><a name="[1a4]"></a>crc16_ccitt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, logic.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInit
</UL>

<P><STRONG><a name="[21a]"></a>ctrlUledPro</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dm633.o(i.ctrlUledPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D8_D1_D2_D3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D8_D1_D2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D7_D8_D1_D2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D7_D8_D1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D6_D7_D8_D1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D6_D7_D8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D5_D6_D7_D8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D5_D6_D7
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D4_D5_D6_D7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D4_D5_D6
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D3_D4_D5_D6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D3_D4_D5
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D2_D3_D4_D5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D2_D3_D4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D1_D2_D3_D4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_Meteor_D1_D2_D3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D7_D8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D7
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D6
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D5_D6
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D5
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D3_D4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D3
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D2_D4_D6_D8
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D3_D5_D7
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7_D8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4_D5
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3_D4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2_D3
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1_D2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUled_RGBValue_D1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_RED
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_GREEN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledTabValue_BLUE
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValueBreathe
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledRGBValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnUledPro
</UL>

<P><STRONG><a name="[ce]"></a>ctrlUledRGBValue</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dm633.o(i.ctrlUledRGBValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUledRGBValue &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e4]"></a>ctrlUledRGBValueBreathe</STRONG> (Thumb, 698 bytes, Stack size 40 bytes, dm633.o(i.ctrlUledRGBValueBreathe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ctrlUledRGBValueBreathe &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetColorNum
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[c9]"></a>ctrlUledTabValue_BLUE</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, dm633.o(i.ctrlUledTabValue_BLUE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ctrlUledTabValue_BLUE &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[cb]"></a>ctrlUledTabValue_GREEN</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, dm633.o(i.ctrlUledTabValue_GREEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ctrlUledTabValue_GREEN &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[ca]"></a>ctrlUledTabValue_RED</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, dm633.o(i.ctrlUledTabValue_RED))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ctrlUledTabValue_RED &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[cf]"></a>ctrlUled_RGBValue_D1</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d8]"></a>ctrlUled_RGBValue_D1_D2</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D2 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[de]"></a>ctrlUled_RGBValue_D1_D2_D3</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D2_D3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D2_D3 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[df]"></a>ctrlUled_RGBValue_D1_D2_D3_D4</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D2_D3_D4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D2_D3_D4 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e0]"></a>ctrlUled_RGBValue_D1_D2_D3_D4_D5</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D2_D3_D4_D5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D2_D3_D4_D5 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e1]"></a>ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e2]"></a>ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e3]"></a>ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7_D8</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7_D8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D2_D3_D4_D5_D6_D7_D8 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[dc]"></a>ctrlUled_RGBValue_D1_D3_D5_D7</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D1_D3_D5_D7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D1_D3_D5_D7 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d1]"></a>ctrlUled_RGBValue_D2</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D2 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[dd]"></a>ctrlUled_RGBValue_D2_D4_D6_D8</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D2_D4_D6_D8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D2_D4_D6_D8 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d2]"></a>ctrlUled_RGBValue_D3</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D3 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d9]"></a>ctrlUled_RGBValue_D3_D4</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D3_D4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D3_D4 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d3]"></a>ctrlUled_RGBValue_D4</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D4 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d4]"></a>ctrlUled_RGBValue_D5</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D5 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[da]"></a>ctrlUled_RGBValue_D5_D6</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D5_D6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D5_D6 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d5]"></a>ctrlUled_RGBValue_D6</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D6 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d6]"></a>ctrlUled_RGBValue_D7</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D7 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[db]"></a>ctrlUled_RGBValue_D7_D8</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D7_D8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D7_D8 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[d7]"></a>ctrlUled_RGBValue_D8</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_D8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_D8 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e5]"></a>ctrlUled_RGBValue_Meteor_D1_D2_D3</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D1_D2_D3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D1_D2_D3 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[ed]"></a>ctrlUled_RGBValue_Meteor_D1_D2_D3_D4</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D1_D2_D3_D4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D1_D2_D3_D4 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e6]"></a>ctrlUled_RGBValue_Meteor_D2_D3_D4</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D2_D3_D4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D2_D3_D4 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[ee]"></a>ctrlUled_RGBValue_Meteor_D2_D3_D4_D5</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D2_D3_D4_D5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D2_D3_D4_D5 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e7]"></a>ctrlUled_RGBValue_Meteor_D3_D4_D5</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D3_D4_D5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D3_D4_D5 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[ef]"></a>ctrlUled_RGBValue_Meteor_D3_D4_D5_D6</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D3_D4_D5_D6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D3_D4_D5_D6 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e8]"></a>ctrlUled_RGBValue_Meteor_D4_D5_D6</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D4_D5_D6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D4_D5_D6 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[f0]"></a>ctrlUled_RGBValue_Meteor_D4_D5_D6_D7</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D4_D5_D6_D7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D4_D5_D6_D7 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[e9]"></a>ctrlUled_RGBValue_Meteor_D5_D6_D7</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D5_D6_D7))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D5_D6_D7 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[f1]"></a>ctrlUled_RGBValue_Meteor_D5_D6_D7_D8</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D5_D6_D7_D8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D5_D6_D7_D8 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[ea]"></a>ctrlUled_RGBValue_Meteor_D6_D7_D8</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D6_D7_D8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D6_D7_D8 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[f2]"></a>ctrlUled_RGBValue_Meteor_D6_D7_D8_D1</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D6_D7_D8_D1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D6_D7_D8_D1 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[eb]"></a>ctrlUled_RGBValue_Meteor_D7_D8_D1</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D7_D8_D1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D7_D8_D1 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[f3]"></a>ctrlUled_RGBValue_Meteor_D7_D8_D1_D2</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D7_D8_D1_D2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D7_D8_D1_D2 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[ec]"></a>ctrlUled_RGBValue_Meteor_D8_D1_D2</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D8_D1_D2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D8_D1_D2 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[f4]"></a>ctrlUled_RGBValue_Meteor_D8_D1_D2_D3</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, dm633.o(i.ctrlUled_RGBValue_Meteor_D8_D1_D2_D3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctrlUled_RGBValue_Meteor_D8_D1_D2_D3 &rArr; ctrlUledPro &rArr; SW_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlUledPro
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskLight
</UL>

<P><STRONG><a name="[19b]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMPU6050
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[23b]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b0]"></a>dmp_enable_feature</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[23e]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[247]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1ad]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[1c1]"></a>dmp_read_fifo</STRONG> (Thumb, 464 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Timer2_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_dmp_get_euler_angle
</UL>

<P><STRONG><a name="[1c9]"></a>dmp_set_accel_bias</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_accel_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_run_self_test
</UL>

<P><STRONG><a name="[1b1]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[1c7]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_run_self_test
</UL>

<P><STRONG><a name="[1b4]"></a>dmp_set_interrupt_mode</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_interrupt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dmp_set_interrupt_mode &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[1af]"></a>dmp_set_orientation</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[244]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[245]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[246]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[240]"></a>dmp_set_tap_axes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[241]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[23f]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[242]"></a>dmp_set_tap_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[243]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[185]"></a>dwt_isr</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, deca_device.o(i.dwt_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dwt_isr &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write32BitOffsetReg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadFromDevice
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read32BitOffsetReg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read16BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[220]"></a>dwt_setcallbacks</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, deca_device.o(i.dwt_setcallbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dwt_setcallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
</UL>

<P><STRONG><a name="[13f]"></a>dwt_syncrxbufptrs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, deca_device.o(i.dwt_syncrxbufptrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Write8BitOffsetReg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Read8BitOffsetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
</UL>

<P><STRONG><a name="[16f]"></a>exti_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>exti_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>exti_init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gd32f30x_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Port_EXIT_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGDOxIntInit
</UL>

<P><STRONG><a name="[133]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Port_EXIT_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGDOxIntInit
</UL>

<P><STRONG><a name="[175]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITEnStatus
</UL>

<P><STRONG><a name="[232]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[24d]"></a>fmc_bank0_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank0_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[24e]"></a>fmc_bank0_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank0_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>

<P><STRONG><a name="[24f]"></a>fmc_bank1_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank1_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[250]"></a>fmc_bank1_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank1_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
</UL>

<P><STRONG><a name="[179]"></a>fmc_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>

<P><STRONG><a name="[178]"></a>fmc_page_erase</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, gd32f30x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[17b]"></a>fmc_unlock</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>

<P><STRONG><a name="[192]"></a>fmc_word_program</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gd32f30x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashWriteBuf
</UL>

<P><STRONG><a name="[17a]"></a>fmc_wscnt_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_wscnt_set))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>

<P><STRONG><a name="[c4]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_DW1000
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskBeep
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBeep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromSPI
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
</UL>

<P><STRONG><a name="[c3]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskBeep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_PORT_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToSPI
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromSPI
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
</UL>

<P><STRONG><a name="[1b6]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_write_char
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_start
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_read_char
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_ack
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_NoAck
</UL>

<P><STRONG><a name="[131]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f30x_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Port_EXIT_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGDOxIntInit
</UL>

<P><STRONG><a name="[10c]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_DW1000
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGpioInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevID_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBeep
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSWD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Port_EXIT_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_write_char
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_stop
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_start
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_read_char
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_ack
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_PORT_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_NoAck
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGDOxIntInit
</UL>

<P><STRONG><a name="[162]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevID_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_read_char
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_check_ack
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
</UL>

<P><STRONG><a name="[205]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
</UL>

<P><STRONG><a name="[1ae]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, math_fun.o(i.inv_orientation_matrix_to_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[252]"></a>inv_row_2_scale</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, math_fun.o(i.inv_row_2_scale))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[63]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ab]"></a>mpu_configure_fifo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[24c]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1c8]"></a>mpu_get_accel_sens</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_run_self_test
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
</UL>

<P><STRONG><a name="[25f]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[25c]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1c6]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_sens))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_run_self_test
</UL>

<P><STRONG><a name="[25d]"></a>mpu_get_lpf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_lpf))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[25e]"></a>mpu_get_sample_rate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1a9]"></a>mpu_init</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
</UL>

<P><STRONG><a name="[248]"></a>mpu_load_firmware</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mpu_load_firmware &rArr; mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[25a]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[249]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[258]"></a>mpu_read_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_read_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[23d]"></a>mpu_reset_fifo</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mpu_reset_fifo &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[1c5]"></a>mpu_run_self_test</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, inv_mpu.o(i.mpu_run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_run_self_test
</UL>

<P><STRONG><a name="[255]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_accel_fsr &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[257]"></a>mpu_set_bypass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_bypass &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1b3]"></a>mpu_set_dmp_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[254]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_gyro_fsr &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[25b]"></a>mpu_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_int_latched &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[256]"></a>mpu_set_lpf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mpu_set_lpf &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1ac]"></a>mpu_set_sample_rate</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1aa]"></a>mpu_set_sensors</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DMP_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[23c]"></a>mpu_write_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_write_mem &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[15b]"></a>nvic_irq_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexON
</UL>

<P><STRONG><a name="[10d]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbAnchorIrqTask
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGpioInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Port_EXIT_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaMutexOFF
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGDOxIntInit
</UL>

<P><STRONG><a name="[187]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[219]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[1a2]"></a>oListDataInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, olist.o(i.oListDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oListDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocationDataAppInit
</UL>

<P><STRONG><a name="[17f]"></a>oList_Write_data</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, olist.o(i.oList_Write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = oList_Write_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstAddProcess
</UL>

<P><STRONG><a name="[260]"></a>portGetTickCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.portGetTickCnt))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>

<P><STRONG><a name="[fb]"></a>rcu_clock_freq_get</STRONG> (Thumb, 378 bytes, Stack size 96 bytes, gd32f30x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>

<P><STRONG><a name="[10b]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGpioInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevID_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitBeep
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSWD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Port_EXIT_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_I2C_PORT_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000GpioInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGDOxIntInit
</UL>

<P><STRONG><a name="[239]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>

<P><STRONG><a name="[238]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>

<P><STRONG><a name="[f9]"></a>readCanDriData</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, can_bus.o(i.readCanDriData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readCanDriData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BusRxDataCallback
</UL>

<P><STRONG><a name="[12b]"></a>sleep_ms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, deca_sleep.o(i.sleep_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_DW1000
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DECA_Sleep
</UL>

<P><STRONG><a name="[1cc]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_crc_polynomial_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
</UL>

<P><STRONG><a name="[1cd]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
</UL>

<P><STRONG><a name="[1fb]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
</UL>

<P><STRONG><a name="[1fa]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
</UL>

<P><STRONG><a name="[206]"></a>spi_i2s_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f30x_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
</UL>

<P><STRONG><a name="[18b]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
</UL>

<P><STRONG><a name="[1cb]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ChangeRate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
</UL>

<P><STRONG><a name="[18a]"></a>spi_send_byte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi_bus.o(i.spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[207]"></a>spi_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiInit
</UL>

<P><STRONG><a name="[233]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[188]"></a>systick_config</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = systick_config &rArr; Error_Handler &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[262]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[75]"></a>UwbRxOkCb</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uwb_anchor.o(i.UwbRxOkCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = UwbRxOkCb &rArr; AncDataFrameProcess &rArr; AncRxFinalFrameProcess &rArr; AddDistData &rArr; GetDistDataBuf &rArr; DeleteSecondListData &rArr; TagOffLineProcess &rArr; WriteReportInfo &rArr; CanBufferWrite &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ReadRxData
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxElseBeaconProcess
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncIrqDeclareFrameProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncErrorProcess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AncDataFrameProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uwb_anchor.o(i.UwbAnchorIrqTask)
</UL>
<P><STRONG><a name="[72]"></a>else_err_cb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uwb_anchor.o(i.else_err_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = else_err_cb &rArr; DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxReset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_ForceTRxOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uwb_anchor.o(i.UwbAnchorIrqTask)
</UL>
<P><STRONG><a name="[73]"></a>rx_err_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uwb_anchor.o(i.rx_err_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rx_err_cb &rArr; DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uwb_anchor.o(i.UwbAnchorIrqTask)
</UL>
<P><STRONG><a name="[74]"></a>rx_to_cb</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uwb_anchor.o(i.rx_to_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rx_to_cb &rArr; DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uwb_anchor.o(i.UwbAnchorIrqTask)
</UL>
<P><STRONG><a name="[76]"></a>tx_conf_cb</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uwb_anchor.o(i.tx_conf_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tx_conf_cb &rArr; DWT_RxEnable &rArr; DWT_ForceTRxOff &rArr; dwt_syncrxbufptrs &rArr; DWT_Write8BitOffsetReg &rArr; DWT_WriteToDevice &rArr; WriteToSPI &rArr; HAL_SPI_Transmit &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_SetRxTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_RxEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uwb_anchor.o(i.UwbAnchorIrqTask)
</UL>
<P><STRONG><a name="[10e]"></a>CanRcvBusProc</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, can_app.o(i.CanRcvBusProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CanRcvBusProc &rArr; WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[111]"></a>CanRcvIrMatchProc</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, can_app.o(i.CanRcvIrMatchProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CanRcvIrMatchProc &rArr; SetWlAddr &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWlAddr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSRemoteCtrlInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[114]"></a>CanRcvSetPar</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, can_app.o(i.CanRcvSetPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CanRcvSetPar &rArr; SetWlAddr &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWlAddr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[116]"></a>CanRcvWlSendProc</STRONG> (Thumb, 346 bytes, Stack size 112 bytes, can_app.o(i.CanRcvWlSendProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = CanRcvWlSendProc &rArr; WL_SendData &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_Init &rArr; RFID_HardwareInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_SendData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSRemoteCtrlInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalCanRxProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCanRxProc
</UL>

<P><STRONG><a name="[14]"></a>LogicGetAngleValueXProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(i.LogicGetAngleValueXProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>LogicGetAngleValueYProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(i.LogicGetAngleValueYProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LogicGetAngleValueZProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(i.LogicGetAngleValueZProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>LogicGetCalibrateFlagProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(i.LogicGetCalibrateFlagProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>LogicGetDevTypeInfProc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, logic.o(i.LogicGetDevTypeInfProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>LogicGetModifyParamAllProc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, logic.o(i.LogicGetModifyParamAllProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LogicGetModifyParamAllProc &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>LogicGetModifyParamNumbProc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, logic.o(i.LogicGetModifyParamNumbProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>LogicGetModifyParamProc</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, logic.o(i.LogicGetModifyParamProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>LogicGetReportIntervalProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(i.LogicGetReportIntervalProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>LogicGetSystemStatusProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(i.LogicGetSystemStatusProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>LogicGetWorkModeProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(i.LogicGetWorkModeProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>LogicSaveParamMsgProc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, logic.o(i.LogicSaveParamMsgProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LogicSaveParamMsgProc &rArr; LogicParamSaveProc &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>LogicSetAngleValueXProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(i.LogicSetAngleValueXProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LogicSetAngleValueYProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(i.LogicSetAngleValueYProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>LogicSetAngleValueZProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(i.LogicSetAngleValueZProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>LogicSetCalibrateFlagProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(i.LogicSetCalibrateFlagProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>LogicSetDevTypeInfProc</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, logic.o(i.LogicSetDevTypeInfProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>LogicSetModifyParamNumbProc</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, logic.o(i.LogicSetModifyParamNumbProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>LogicSetModifyParamProc</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, logic.o(i.LogicSetModifyParamProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>LogicSetReportIntervalProc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, logic.o(i.LogicSetReportIntervalProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LogicSetReportIntervalProc &rArr; LogicRunInfSaveProc &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>LogicSetSystemStatusProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(i.LogicSetSystemStatusProc))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>LogicSetWorkModeProc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, logic.o(i.LogicSetWorkModeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LogicSetWorkModeProc &rArr; LogicRunInfSaveProc &rArr; FLASH_ErasePage &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>WlVarInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wireless.o(i.WlVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_MNG_Task
</UL>

<P><STRONG><a name="[251]"></a>get_st_biases</STRONG> (Thumb, 1128 bytes, Stack size 64 bytes, inv_mpu.o(i.get_st_biases))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_st_biases &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Read_Len
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[253]"></a>set_int_enable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.set_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_int_enable &rArr; MPU6500_Write_Len &rArr; MPU6500_I2C_write_char &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[24a]"></a>decode_gesture</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.decode_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[12f]"></a>SW_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_iic.o(i.SW_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_SendByte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM634_GBC
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_LATCH
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM633_Internal_GCK
</UL>

<P><STRONG><a name="[1d3]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d0]"></a>OS_InitMisc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d1]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d2]"></a>OS_InitTCBList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d5]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d7]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[261]"></a>system_clock_72m_hxtal</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, system_gd32f30x.o(i.system_clock_72m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[216]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f30x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[203]"></a>SpiMcuRead</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rfid_cc1101.o(i.SpiMcuRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpiMcuRead &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifo
</UL>

<P><STRONG><a name="[209]"></a>SpiMcuWrite</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rfid_cc1101.o(i.SpiMcuWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpiMcuWrite &rArr; DelayUs &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteFifo
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiWrite
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
